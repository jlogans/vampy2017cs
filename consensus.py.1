import socket
import threading
import turtle
import graph
import time

mycolor = "#{0:06x}".format(random.randint(0x000000, 0xffffff))
mycpu   = 17 # change this for each code

def COLMSG(N, color):
	return "COLMSG\t{0}\t{1}\t{2}".format(N, time.time(), color)

def CMDMSG(color):
	return "CMDMSG\t{0}".format(color)

#if msg.strip().split("\t")[0] == "COLMSG"

def client():
	global mycolor
	global mycpu
	while True:
		# 1. send COLMSG to my neighbors
		# 2. actually don't have a loop we're done after that
		msg = ""
		addr = ("vampy-cs-"+N, 8080)
		data = msg.encode("UTF-8")
		phone = socket.socket()
		try:
			phone.connect(addr)
			phone.send(data)
			resp = bytes.decode(phone.recv(1024))
			phone.close()
		except ConnectionRefusedError:
			print("They appear to be offline.")

def server():
	# 1. create a socket for port 8080
	# 2. listen for 128 that'll be good
	# 3. turtle
	# 4. when we get a COLMSG from neighbor n with color c and time t:
	#	1. if n not in clrdic or t > clrdic[n][1]:
	#		1. clrdic[n] = (c, t)
	#	2. if len(clrdic) = len(my neighbors):
	#		1. find the recommended color x
	#		2. send a CMDMSG to my neighbors for color x who aren't already x
	# 5. when we get a CMDMSG with color c:
	#	1. change mycolor to c
	#	2. update the turtle bg
	#	3. send a COLMSG to my neighbors
	global mycolor
	global mycpu
	addr  = (socket.gethostname(), 8080)
	store = socket.socket()
	store.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	store.bind(addr)
	store.listen(128)
	turtle.resetscreen()
	turtle.bgcolor(mycolor)
	clrdic = {}
	while True:
		try:
			phone, cid = store.accept()
			msg = bytes.decode(phone.recv(1024))
			phone.close()
			if msg == "R":
				turtle.right(22.5)
			elif msg == "L":
				turtle.left(22.5)
			elif msg == "F":
				turtle.forward(10)
			elif msg == "C":
				turtle.circle(35)
			else:
				print("Call from {0}: {1}.".format(cid, msg))
		except KeyboardInterrupt:
			print("Shutting down gracefully...")
			store.close()
			break
		except Exception as e:
			print("Something unexpected happened, shutting down...")
			print("Error message = {0}.".format(e))
			store.close()
			break

t1 = threading.Thread(target=server)
t2 = threading.Thread(target=client)
t1.start()
t2.start()
print("The threads should now be running.")
t1.join()
t2.join()
print("How did this happen?")
